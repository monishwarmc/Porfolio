{"ast":null,"code":"// src/refs.ts\nimport { isFunction } from \"@chakra-ui/utils\";\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\".concat(value, \"' to ref '\").concat(ref, \"'\"));\n  }\n}\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return function (node) {\n    refs.forEach(function (ref) {\n      return assignRef(ref, node);\n    });\n  };\n}\n\n// src/context.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction createContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$strict = options.strict,\n    strict = _options$strict === void 0 ? true : _options$strict,\n    _options$errorMessage = options.errorMessage,\n    errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n    name = options.name;\n  var Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    var context = useReactContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\n\n// src/children.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(function (child) {\n    return isValidElement(child);\n  });\n}\nexport { assignRef, createContext, getValidChildren, mergeRefs };","map":{"version":3,"names":["isFunction","assignRef","ref","value","current","error","Error","concat","mergeRefs","_len","arguments","length","refs","Array","_key","node","forEach","createContext","createReactContext","useContext","useReactContext","options","undefined","_options$strict","strict","_options$errorMessage","errorMessage","name","Context","displayName","_a","context","captureStackTrace","call","Provider","Children","isValidElement","getValidChildren","children","toArray","filter","child"],"sources":["/home/monishwar69/Desktop/git/Portfolio/node_modules/@chakra-ui/react-utils/dist/index.esm.js"],"sourcesContent":["// src/refs.ts\nimport { isFunction } from \"@chakra-ui/utils\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => assignRef(ref, node));\n  };\n}\n\n// src/context.ts\nimport {\n  createContext as createReactContext,\n  useContext as useReactContext\n} from \"react\";\nfunction createContext(options = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name\n  } = options;\n  const Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    const context = useReactContext(Context);\n    if (!context && strict) {\n      const error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [\n    Context.Provider,\n    useContext,\n    Context\n  ];\n}\n\n// src/children.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter((child) => isValidElement(child));\n}\nexport {\n  assignRef,\n  createContext,\n  getValidChildren,\n  mergeRefs\n};\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAASA,CAACC,GAAG,EAAEC,KAAK,EAAE;EAC7B,IAAID,GAAG,IAAI,IAAI,EACb;EACF,IAAIF,UAAU,CAACE,GAAG,CAAC,EAAE;IACnBA,GAAG,CAACC,KAAK,CAAC;IACV;EACF;EACA,IAAI;IACFD,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,yBAAAC,MAAA,CAAyBJ,KAAK,gBAAAI,MAAA,CAAaL,GAAG,MAAG,CAAC;EACnE;AACF;AACA,SAASM,SAASA,CAAA,EAAU;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACxB,OAAO,UAACC,IAAI,EAAK;IACfH,IAAI,CAACI,OAAO,CAAC,UAACd,GAAG;MAAA,OAAKD,SAAS,CAACC,GAAG,EAAEa,IAAI,CAAC;IAAA,EAAC;EAC7C,CAAC;AACH;;AAEA;AACA,SACEE,aAAa,IAAIC,kBAAkB,EACnCC,UAAU,IAAIC,eAAe,QACxB,OAAO;AACd,SAASH,aAAaA,CAAA,EAAe;EAAA,IAAdI,OAAO,GAAAX,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAY,SAAA,GAAAZ,SAAA,MAAG,CAAC,CAAC;EACjC,IAAAa,eAAA,GAIIF,OAAO,CAHTG,MAAM;IAANA,MAAM,GAAAD,eAAA,cAAG,IAAI,GAAAA,eAAA;IAAAE,qBAAA,GAGXJ,OAAO,CAFTK,YAAY;IAAZA,YAAY,GAAAD,qBAAA,cAAG,4FAA4F,GAAAA,qBAAA;IAC3GE,IAAI,GACFN,OAAO,CADTM,IAAI;EAEN,IAAMC,OAAO,GAAGV,kBAAkB,CAAC,KAAK,CAAC,CAAC;EAC1CU,OAAO,CAACC,WAAW,GAAGF,IAAI;EAC1B,SAASR,UAAUA,CAAA,EAAG;IACpB,IAAIW,EAAE;IACN,IAAMC,OAAO,GAAGX,eAAe,CAACQ,OAAO,CAAC;IACxC,IAAI,CAACG,OAAO,IAAIP,MAAM,EAAE;MACtB,IAAMnB,KAAK,GAAG,IAAIC,KAAK,CAACoB,YAAY,CAAC;MACrCrB,KAAK,CAACsB,IAAI,GAAG,cAAc;MAC3B,CAACG,EAAE,GAAGxB,KAAK,CAAC0B,iBAAiB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACG,IAAI,CAAC3B,KAAK,EAAED,KAAK,EAAEc,UAAU,CAAC;MACnF,MAAMd,KAAK;IACb;IACA,OAAO0B,OAAO;EAChB;EACA,OAAO,CACLH,OAAO,CAACM,QAAQ,EAChBf,UAAU,EACVS,OAAO,CACR;AACH;;AAEA;AACA,SAASO,QAAQ,EAAEC,cAAc,QAAQ,OAAO;AAChD,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAClC,OAAOH,QAAQ,CAACI,OAAO,CAACD,QAAQ,CAAC,CAACE,MAAM,CAAC,UAACC,KAAK;IAAA,OAAKL,cAAc,CAACK,KAAK,CAAC;EAAA,EAAC;AAC5E;AACA,SACExC,SAAS,EACTgB,aAAa,EACboB,gBAAgB,EAChB7B,SAAS"},"metadata":{},"sourceType":"module"}