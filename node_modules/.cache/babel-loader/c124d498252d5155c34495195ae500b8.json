{"ast":null,"code":"import _objectWithoutProperties from \"/home/monishwar69/Desktop/git/Portfolio/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"attrX\", \"attrY\", \"originX\", \"originY\", \"pathLength\", \"pathSpacing\", \"pathOffset\"];\nimport { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, _ref, options, transformTemplate) {\n  var attrX = _ref.attrX,\n    attrY = _ref.attrY,\n    originX = _ref.originX,\n    originY = _ref.originY,\n    pathLength = _ref.pathLength,\n    _ref$pathSpacing = _ref.pathSpacing,\n    pathSpacing = _ref$pathSpacing === void 0 ? 1 : _ref$pathSpacing,\n    _ref$pathOffset = _ref.pathOffset,\n    pathOffset = _ref$pathOffset === void 0 ? 0 : _ref$pathOffset,\n    latest = _objectWithoutProperties(_ref, _excluded);\n  buildHTMLStyles(state, latest, options, transformTemplate);\n  state.attrs = state.style;\n  state.style = {};\n  var attrs = state.attrs,\n    style = state.style,\n    dimensions = state.dimensions;\n  /**\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n   * and copy it into style.\n   */\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  }\n  // Parse transformOrigin\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  }\n  // Treat x/y not as shortcuts but as actual attributes\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY;\n  // Build SVG path if one has been defined\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\nexport { buildSVGAttrs };","map":{"version":3,"names":["buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","_ref","options","transformTemplate","attrX","attrY","originX","originY","pathLength","_ref$pathSpacing","pathSpacing","_ref$pathOffset","pathOffset","latest","_objectWithoutProperties","_excluded","attrs","style","dimensions","transform","undefined","transformOrigin","x","y"],"sources":["/home/monishwar69/Desktop/git/Portfolio/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,mCAAmC;AACnE,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,YAAY,QAAQ,YAAY;;AAEzC;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAAC,IAAA,EAEfC,OAAO,EAAEC,iBAAiB,EAAE;EAAA,IAFTC,KAAK,GAAAH,IAAA,CAALG,KAAK;IAAEC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IAAEC,OAAO,GAAAL,IAAA,CAAPK,OAAO;IAAEC,OAAO,GAAAN,IAAA,CAAPM,OAAO;IAAEC,UAAU,GAAAP,IAAA,CAAVO,UAAU;IAAAC,gBAAA,GAAAR,IAAA,CAAES,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,eAAA,GAAAV,IAAA,CAAEW,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;IAExGE,MAAM,GAAAC,wBAAA,CAAAb,IAAA,EAAAc,SAAA;EACLnB,eAAe,CAACI,KAAK,EAAEa,MAAM,EAAEX,OAAO,EAAEC,iBAAiB,CAAC;EAC1DH,KAAK,CAACgB,KAAK,GAAGhB,KAAK,CAACiB,KAAK;EACzBjB,KAAK,CAACiB,KAAK,GAAG,CAAC,CAAC;EAChB,IAAQD,KAAK,GAAwBhB,KAAK,CAAlCgB,KAAK;IAAEC,KAAK,GAAiBjB,KAAK,CAA3BiB,KAAK;IAAEC,UAAU,GAAKlB,KAAK,CAApBkB,UAAU;EAChC;AACJ;AACA;AACA;EACI,IAAIF,KAAK,CAACG,SAAS,EAAE;IACjB,IAAID,UAAU,EACVD,KAAK,CAACE,SAAS,GAAGH,KAAK,CAACG,SAAS;IACrC,OAAOH,KAAK,CAACG,SAAS;EAC1B;EACA;EACA,IAAID,UAAU,KACTZ,OAAO,KAAKc,SAAS,IAAIb,OAAO,KAAKa,SAAS,IAAIH,KAAK,CAACE,SAAS,CAAC,EAAE;IACrEF,KAAK,CAACI,eAAe,GAAGxB,sBAAsB,CAACqB,UAAU,EAAEZ,OAAO,KAAKc,SAAS,GAAGd,OAAO,GAAG,GAAG,EAAEC,OAAO,KAAKa,SAAS,GAAGb,OAAO,GAAG,GAAG,CAAC;EAC5I;EACA;EACA,IAAIH,KAAK,KAAKgB,SAAS,EACnBJ,KAAK,CAACM,CAAC,GAAGlB,KAAK;EACnB,IAAIC,KAAK,KAAKe,SAAS,EACnBJ,KAAK,CAACO,CAAC,GAAGlB,KAAK;EACnB;EACA,IAAIG,UAAU,KAAKY,SAAS,EAAE;IAC1BtB,YAAY,CAACkB,KAAK,EAAER,UAAU,EAAEE,WAAW,EAAEE,UAAU,EAAE,KAAK,CAAC;EACnE;AACJ;AAEA,SAASb,aAAa"},"metadata":{},"sourceType":"module"}